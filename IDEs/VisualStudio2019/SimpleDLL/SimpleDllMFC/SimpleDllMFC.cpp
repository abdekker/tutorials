// SimpleDllMFC.cpp : Defines the initialization routines for the DLL.

/* - Create new project > MFC Dynamic-Link Library
	- Several options available (those selected are given an asterisk)
		- DLL type
			- Regular DLL using shared MFC DLL
			- Regular DLL with MFC statically linked ***
			- MFC extension DLL
		- Additional features
			- Automation
			- Windows sockets

	- Changes made in project properties
		- General > Target Name = "$(ProjectName)"
		- Advanced > Use of MFC = "Use MFC in a Static Library"
		- Debugging > Command = "..\SimpleDllClient.exe"
		- Linker > Input > Module Definition File > .\SimpleDllMFC.def
 */

#include "pch.h"
#include "framework.h"
#include "SimpleDllMFC.h"

// To output a debug message...
#ifdef _DEBUG
	#include <iostream>
#endif

#ifdef _DEBUG
	// Uncomment this line to pop up a message in DEBUG mode (generated by some of the DLLs)
	//#define DBG_SHOW_POPUP_MSGS_MFC
#endif

//
//TODO: If this DLL is dynamically linked against the MFC DLLs, any functions exported from this
//		DLL which call into MFC must have the AFX_MANAGE_STATE macro added at the very beginning
//		of the function.
//
//		For example:
//
//		extern "C" BOOL PASCAL EXPORT ExportedFunction()
//		{
//			AFX_MANAGE_STATE(AfxGetStaticModuleState());
//			// normal function body here
//		}
//
//		It is very important that this macro appear in each function, prior to any calls into MFC.
//		This means that it must appear as the first statement within the function, even before any
//		object variable declarations as their constructors may generate calls into the MFC DLL.
//
//		Please see MFC Technical Notes 33 and 58 for additional details.
//

// The one and only CSimpleDllMFCApp object
CSimpleDllMFCApp theApp;

// Start: CSimpleDllMFCApp
BEGIN_MESSAGE_MAP(CSimpleDllMFCApp, CWinApp)
END_MESSAGE_MAP()

CSimpleDllMFCApp::CSimpleDllMFCApp()
{
	// Constructor
	// TODO: add construction code here, but place significant initialization in InitInstance

#ifdef _DEBUG
	// Note: Prints out a message only in _DEBUG mode and if the client is a console app
	std::cout << "      !! CSimpleDllMFCApp constructor !!\n";

	#ifdef DBG_SHOW_POPUP_MSGS_MFC
		TCHAR szMsg[50];
		wsprintf(&szMsg[0], L"CSimpleDllMFCApp constructor");
		MessageBox(NULL, (LPCTSTR)szMsg, L"Developer Test", MB_OK | MB_ICONINFORMATION);
	#endif
#endif
}

#ifdef _DEBUG
CSimpleDllMFCApp::~CSimpleDllMFCApp()
{
	// Destructor
	std::cout << "      !! CSimpleDllMFCApp destructor !!\n";

	#ifdef DBG_SHOW_POPUP_MSGS_MFC
		TCHAR szMsg[50];
		wsprintf(&szMsg[0], L"CSimpleDllMFCApp destructor");
		MessageBox(NULL, (LPCTSTR)szMsg, L"Developer Test", MB_OK | MB_ICONINFORMATION);
	#endif
}
#endif

// CSimpleDllMFCApp initialization
BOOL CSimpleDllMFCApp::InitInstance()
{
#ifdef _DEBUG
	// Note: Prints out a message only in _DEBUG mode and if the client is a console app
	std::cout << "      !! CSimpleDllMFCApp InitInstance !!\n";
#endif

	CWinApp::InitInstance();
	return TRUE;
}

unsigned int CSimpleDllMFCApp::SimpleReturn_InsideClass()
{
	return 29;
}
// End: CSimpleDllMFCApp

// Methods defined outside CSimpleDllMFCApp
unsigned int SIMPLEDLLMFC_API SimpleReturn1_OutsideClass()
{
	// Call one of the methods from
	return theApp.SimpleReturn_InsideClass();
}

unsigned int SIMPLEDLLMFC_API SimpleReturn2_OutsideClass()
{
	return 43;
}
