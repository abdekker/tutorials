{
    "version": "2.0.0",
    "tasks": [
        {
            // Task to create the "build" folder
            "label": "Create build folder",
            "type": "shell",
            "command": "mkdir",
            "args": [
                "-p",   // Do not fail if the folder already exists
                "${workspaceFolder}/build"
            ]
        },
        {
            // Task to clean out the "build" folder
            // Note: This will clean all sub-directories, including Debug and Release
            "label": "Clean build folder",
            "type": "shell",
            "command": "rm",
            "args": [
                "-rf",
                "${workspaceFolder}/build/*"
            ]
        },
        {
            // Composite task that demonstrates:
            //      * Creating the "build" folder (no error if it exists already)
            //      * Clearing out all files in this folder (with errors swallowed)
            //      * Removing the "CMakeFiles" folder (temporary CMake folder)
            //      * Retains the Debug & Release folders
            "label": "Create build, retain build type folders",
            "type": "shell",
            "command": "",
            "args": [
                "mkdir", "-p", "${workspaceFolder}/build", ";",
                "cd", "${workspaceFolder}/build", ";",
                "rm", "-f", "*", "2>", "/dev/null", ";",
                "rm", "-rf", "${workspaceFolder}/build/CMakeFiles"
            ]
        },
        {
            // Task to create another folder (demo only)
            "label": "Create another folder",
            "type": "shell",
            "command": "mkdir",
            "args": [
                "-p",
                "${workspaceFolder}/TEST\n"
            ]
        },
        {
            // Task which asks user to select a folder to create from a list (demo only)
            "label": "Create folder by 'pickString' input",
            "type": "shell",
            "command": "mkdir",
            "args": [
                "${workspaceFolder}/${input:pickFromList}"
            ]
        },
        {
            // Task to create a randomly named folder (demo only - not currently working)
            "label": "Create randomised folder by 'command' input",
            "type": "shell",
            "command": "mkdir",
            "args": [
                "${workspaceFolder}/${input:randomString}"
            ]
        },
        {
            // Primary make task (which consumes Makefile)
            "label": "Make",
            "type": "shell",
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "command": "make",
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            // Primary Debug CMake task (which consumes CMakeLists.txt)
            "label": "CMake Debug",
            "type": "shell",
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "command": "cmake",
            "args": [
                // Explanation of arguments to cmake:
                // * -G 'Unix Makefiles'        = Generate standard UNIX makefiles
                // * -DCMAKE_BUILD_TYPE=Debug   = Define the $CMAKE_BUILD_TYPE environment variable
                //      - Note: Define CMAKE_BUILD_TYPE because makefiles generated by CMake are single-configuration
                // * ..                         = Path CMakeLists.txt (since cmake is called from "build")

                // The cmake command appears to fail on a single line:
                //      "args": [ "-G 'Unix Makefiles' -DCMAKE_BUILD_TYPE=Debug .." ]
                // On Windows, NMake is the CMake equivalent:
                //      "args": [ "-G 'NMake Makefiles' -DCMAKE_BUILD_TYPE=Debug .." ]
                "-G",
                "'Unix Makefiles'",
                "-DCMAKE_BUILD_TYPE=Debug",
                ".."
            ],
            // The "dependsOn" task(s) are called before running this task
            "dependsOn": [
                //"Create folder by 'pickString' input",
                //"Create randomised folder by 'command' input",
                //"Create build folder",
                //"Clean build folder",
                "Create build, retain build type folders"
            ]
        },
        {
            // Primary Release CMake task (see the "CMake Debug" task for additional details)
            "label": "CMake Release",
            "type": "shell",
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "command": "cmake",
            "args": [
                "-G",
                "'Unix Makefiles'",
                "-DCMAKE_BUILD_TYPE=Release",
                ".."
            ],
            "dependsOn": [
                "Create build, retain build type folders"
            ]
        },
        {
            // Composite task which calls multiple other tasks (demo only)
            // Note: Any task of type "build" (such as "Mask") appears to fail if included in a list like thie
            "label": "Composite task",
            "dependsOn": [
                "Create build folder",
                "Clean build folder",
                "CMake Debug",
                //"Make",     // This causes an error (reason unknown)
                "Create another folder"
            ]
        }
    ],
    "inputs": [
        {
            // Demo input: Get user input for running a task
            "id": "pickFromList",
            "type": "pickString",
            "description": "What folder do you want to create?",
            "options": [
                "dirComponent",
                "dirFunTimes",
                "dirPipe",
                "dirService",
                "dirEnum"
            ],
            "default": "dirComponent"
        },
        {
            // Demo input: Define a local variable (like a parameter)
            "id": "localParameter",
            "type": "pickString",
            "description": "Local parameter",
            "options": [
                "dirComponent",
                "dirFunTimes",
                "dirPipe",
                "dirService",
                "dirEnum"
            ],
            "default": "dirComponent"
        },
        {
            // Demo input: Generate a randomised string using "ssh"
            // Note: Cannot get this to work
            "id": "randomString",
            "type": "command",
            // "command": "openssl",
            // "args": [
            //     "rand",
            //     "-base64",
            //     "32",
            //     "| tr -d /=+ | cut -c -16)" ]
            "command": "gpw",
            "args": [
                "1",
                "16"
            ]
        }
    ]
}
