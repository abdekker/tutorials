# User-defined functions for the Linux bash shell

# To use:
# 1) Copy this file to $HOME
# 2) Add the following to your .bashrc (somewhere near the bottom in a "user" section)
#   # User-defined bash functions
#   if [ -f ~/.bash_usr_functions ]; then
#       . ~/.bash_usr_functions
#   fi
echo "  "User-defined bash functions...

# Note: To debug bash functions:
#   First add them and debug in a separate bash script
#   When debugging is complete, copy the final version here

function take
{
    # This function is based on an idea from the zsh shell
    # Calling "take FOLDER" is equivalent to "mkdir FOLDER && cd FOLDER"
    if [ -z "$1" ]; then
        # No folder provided
        echo Provide folder to create...
    else
        # If we get here, the user provided a parameter which should be the folder name
        declare -i CanCreateFolder=1
        declare -i CanEnterFolder=1
        if [ -d "$1" ] || [ -L "$1" ]; then
            # There is already a directory or Could be directory or symlink...
            if [ -L "$1" ]; then
                # It is a symlink! Symbolic link specific commands go here.
                # Create a symbolic link: "ln -s FILE SYMLINK"
                # Remove: "rm SYMLINK" or "unlink SYMLINK"
                CanCreateFolder=0
                CanEnterFolder=0    # Is this correct?
                echo ...SymLink error!
            else
                # It's a directory!
                CanCreateFolder=0
            fi
        fi

        if [  $CanCreateFolder -gt 0 ]; then
            mkdir "$1"
        fi

        if [ $CanEnterFolder -gt 0 ]; then
            cd "$1"
            # Note: When this bash script exits, the caller will be back in the original folder
            # To open a new bash prompt in the new folder, one option is calling "exec bash"
            #exec bash
        fi
    fi
    #cd /home/tree/projects/$1
}

# Export some functions (to make them available globally)
export -f take

parse_git_branch()
{
    # Shows when you are in a git project (suggested by Jorge Ventura, colleague at Teraki)
    # Note: This function is called every time the bash command line prompt is rendered
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "

# Default PS1 is:
#\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$
